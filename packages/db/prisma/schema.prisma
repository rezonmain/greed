// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider = "zod-prisma"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    permission    Permission[]
    wallets       Wallet[]
    cells         Cell[]
    grids         Grid[]
    Approval      Approval[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Grid {
    id          String       @id @default(cuid())
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    cells       Cell[]
    name        String
    widthCells  Int
    heightCells Int
    permissions Permission[]
    /// The user who owns the grid
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String

    @@unique([name, userId])
    @@index([userId])
}

model Permission {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    /// Serialized string of the permissions, permissions are represented as bit flags
    permissions String
    grid        Grid     @relation(fields: [gridId], references: [id], onDelete: Cascade)
    gridId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String

    @@index([gridId])
    @@index([userId])
}

model Content {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    type      String
    name      String?
    data      String?
    url       String?
    cells     Cell[]
}

model Cell {
    id         String    @id @default(cuid())
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    column     Int
    row        Int
    grid       Grid      @relation(fields: [gridId], references: [id], onDelete: Cascade)
    gridId     String
    content    Content   @relation(fields: [contentId], references: [id])
    contentId  String
    /// The user who's the author of the cell
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    approval   Approval? @relation(fields: [approvalId], references: [id])
    approvalId String?

    @@index([gridId])
    @@index([contentId])
    @@index([userId])
    @@index([approvalId])
}

model Wallet {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    address   String   @unique
    balance   Float    @default(0)
    /// The user who owns the wallet
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String

    @@index([userId])
}

model Approval {
    id         String    @id @default(cuid())
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    approved   Boolean   @default(false)
    approvedAt DateTime?
    /// The user who approved the cell
    user       User?     @relation(fields: [userId], references: [id])
    userId     String?
    Cell       Cell[]

    @@index([userId])
}
